(in-package :coffee.umbrella.clarity.display)

(defconstant instr.fillpoly 0)
(defconstant instr.cat-affine 1)
(defconstant instr.set-fill 2)
(defconstant instr.clear-screen 3)
(defconstant instr.fillqpoly 4)
(defconstant instr.ascii 5)
(defconstant instr.group-start 6)
(defconstant instr.group-end 7)
(defconstant instr.clipgroup-start 8)
(defconstant instr.translate 9)
(defconstant instr.rotate 10)
(defconstant instr.scale 11)
(defconstant instr.set-variable-width 12)
(defconstant instr.set-monospace 13)
(defconstant instr.set-font-size 14)
(defconstant instr.reserve-space 15)

(defrendercode start-group instr.group-start ())
(defrendercode start-clip-group instr.clipgroup-start ()
  (setf (rendercode-display-clip-next %display) t))
(defrendercode end-group instr.group-end ())
(defrendercode affine-concat instr.cat-affine (a)
  (& ((:v (a b c d e f) (affine:component-values a)))
     (<< a b c d e f)))
(defrendercode translate instr.translate (x y) (<< x y))
(defrendercode rotate instr.rotate (a) (<< a))
(defrendercode scale instr.scale (sx sy) (<< sx sy))
(defrendercode set-fill instr.set-fill (r g b a) (<< r g b a))
(defrendercode clear-screen instr.clear-screen ())
(defrendercode set-font-size instr.set-font-size (size) (<< size))
(defrendercode set-monospace instr.set-monospace ())
(defrendercode set-variable-width instr.set-variable-width ())
(defrendercode poly instr.fillpoly (&rest xs-and-ys) (<<<< xs-and-ys))
(defrendercode qpoly instr.fillqpoly (&rest xs-and-ys) (<<<< xs-and-ys))
(defrendercode reserve instr.reserve-space (&rest xs-and-ys) (<<<< xs-and-ys))
(defrendercode text instr.ascii (x y string)
  (locally (declare (type string string)
                    (type single-float x y)
                    (optimize (speed 3) (safety 0)))
    (let ((len (length string)))
      (<< x y len)
      (loop for i below len do
        (<<8 (char-code (char string i))))
      (loop repeat (- (* 4 (ceiling len 4)) len) do (<<8 0)))))

(define-compiler-macro poly (&whole form display &rest xs-and-ys)
  (if (symbolp display)
      (with-gensyms (out)
        `(if (typep ,display 'rendercode-display)
             (let ((,out (rendercode-display-codestream ,display)))
               (macrolet ((<< (x) (if (numberp x)
                                      `(write-byte ,(rendercode-thing x) ,',out)
                                      `(write-byte (rendercode-thing ,x) ,',out))))
                 (if (rendercode-display-clip-next ,display)
                     (setf (rendercode-display-clip-next ,display) nil)
                     (<< instr.fillpoly))
                 (<< ,(length xs-and-ys))
                 ,@(loop for num in xs-and-ys collect `(<< ,num))))
             (apply #'poly ,display (list ,@xs-and-ys))))
      form))

(define-compiler-macro qpoly (&whole form display &rest xs-and-ys)
  (if (symbolp display)
      (with-gensyms (out)
        `(if (typep ,display 'rendercode-display)
             (macrolet ((<< (x) (if (numberp x)
                                    `(write-byte ,(rendercode-thing x) ,',out)
                                    `(write-byte (rendercode-thing ,x) ,',out))))
               (let ((,out (rendercode-display-codestream ,display)))
                 (if (rendercode-display-clip-next ,display)
                     (setf (rendercode-display-clip-next ,display) nil)
                     (<< instr.fillqpoly))
                 (<< ,(length xs-and-ys))
                 ,@(loop for num in xs-and-ys collect `(<< ,num))))
             (apply #'qpoly ,display (list ,@xs-and-ys))))
      form))

(define-compiler-macro text (&whole form display x y string)
  (if (symbolp display)
      `(if (typep ,display 'rendercode-display)
           (macrolet ((<< (x)
                        (if (numberp x)
                            `(write-byte ,(rendercode-thing x) out)
                            `(write-byte (rendercode-thing ,x) out)))
                      (<<8 (x)
                        `(write-byte  ,x out8)))
             (let* ((out (rendercode-display-codestream ,display))
                    (out8 (slot-value out 'stream)))
               (<< instr.ascii)
               (let ((len (length ,string)))
                 (<< ,x) (<<  ,y) (<< len)
                 (loop for i below len do
                   (<<8 (char-code (char ,string i))))
                 (loop repeat (- (* 4 (ceiling len 4)) len) do (<<8 0)))))
           (apply #'text ,display ,x ,y (list ,string)))
      form))
